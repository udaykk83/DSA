/*
Capture Regions on Board
Problem Description

Given a 2-D board A of size N x M containing 'X' and 'O', capture all regions surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.



Problem Constraints
1 <= N, M <= 1000



Input Format
First and only argument is a N x M character matrix A.



Output Format
Make changes to the the input only as matrix is passed by reference.



Example Input
Input 1:

 A = [ 
       [X, X, X, X],
       [X, O, O, X],
       [X, X, O, X],
       [X, O, X, X] 
     ]
Input 2:

 A = [
       [X, O, O],
       [X, O, X],
       [O, O, O]
     ]


Example Output
Output 1:

 After running your function, the board should be:
 A = [
       [X, X, X, X],
       [X, X, X, X],
       [X, X, X, X],
       [X, O, X, X]
     ]
Output 2:

 After running your function, the board should be:
 A = [
       [X, O, O],
       [X, O, X],
       [O, O, O]
     ]


Example Explanation
Explanation 1:

 O in (4,2) is not surrounded by X from below.
Explanation 2:

 No O's are surrounded.
*/

bool isValid(int x, int y, int N, int M){
    return x>=0 and y>=0 and x<N and y<M;
}

vector<int > rowDirection = {-1,1,0,0};
vector<int > colDirection = {0,0,-1,1};

void dfsToChangeW(vector<vector<char> > &A, vector<vector<int>> &vis, int x, int y){
    vis[x][y] = 1;
    A[x][y] = 'O';
    int N = A.size();
    int M = A[0].size();
    for(int i = 0; i<rowDirection.size(); i++){
        int xp = x + rowDirection[i];
        int yp = y + colDirection[i];
        if(isValid(xp, yp, N, M) and A[xp][yp] == 'W' and !vis[xp][yp]){
            dfsToChangeW(A,vis, xp, yp);
        }
    }
}
void dfsToOccupyO(vector<vector<char> > &A, vector<vector<int>> &vis, int x, int y){
    vis[x][y] = 1;
    A[x][y] = 'X';
    int N = A.size();
    int M = A[0].size();
    for(int i = 0; i<rowDirection.size(); i++){
        int xp = x + rowDirection[i];
        int yp = y + colDirection[i];
        if(isValid(xp, yp, N, M) and A[xp][yp] == 'O' and !vis[xp][yp]){
            dfsToOccupyO(A,vis, xp, yp);
        }
    }
}
void dfsToChangeBoundaryToW(vector<vector<char> > &A, vector<vector<int>> &vis, int x, int y){
    vis[x][y] = 1;
    A[x][y] = 'W';
    int N = A.size();
    int M = A[0].size();
    for(int i = 0; i<rowDirection.size(); i++){
        int xp = x + rowDirection[i];
        int yp = y + colDirection[i];
        if(isValid(xp, yp, N, M) and A[xp][yp] == 'O' and !vis[xp][yp]){
            dfsToChangeBoundaryToW(A,vis, xp, yp);
        }
    }
}

void Solution::solve(vector<vector<char> > &A) {
    int N = A.size();
    int M = A[0].size();
    int ans = 0;
    vector<vector<int>> vis(N,vector<int>(M,0));
    for(int i = 0; i<N; i++){
        for(int j = 0; j<M; j++){
            if(i == 0 or j == 0 or i == N-1 or j == M-1){
                if(A[i][j] == 'O' and !vis[i][j] ){
                    dfsToChangeBoundaryToW(A,vis, i, j);
                }
            }
        }
    }
    
    for(int i = 0; i<N; i++){
        for(int j = 0; j<A[i].size(); j++){
            if(A[i][j] == 'O'){
                if( !vis[i][j] ){
                    dfsToOccupyO(A,vis, i, j);
                }
            }
        }
    }
    for(int i = 0; i<N; i++){
        for(int j = 0; j<A[i].size(); j++){
            vis[i][j] = 0;       
        }
    }
    for(int i = 0; i<N; i++){
        for(int j = 0; j<A[i].size(); j++){
            if(i == 0 or j == 0 or i == N-1 or j == M-1){
                if(A[i][j] == 'W'){
                    if( !vis[i][j] ){
                        dfsToChangeW(A,vis, i, j);
                    }
                }
            }
        }
    }
}
