/*
Black Shapes
Problem Description

Given character matrix A of O's and X's, where O = white, X = black.

Return the number of black shapes. A black shape consists of one or more adjacent X's (diagonals not included)



Problem Constraints
1 <= |A|,|A[0]| <= 1000

A[i][j] = 'X' or 'O'



Input Format
The First and only argument is character matrix A.



Output Format
Return a single integer denoting number of black shapes.



Example Input
Input 1:

 A = [ [X, X, X], [X, X, X], [X, X, X] ]
Input 2:

 A = [ [X, O], [O, X] ]


Example Output
Output 1:

 1
Output 2:

 2


Example Explanation
Explanation 1:

 All X's belong to single shapes
Explanation 2:

 Both X's belong to different shapes
*/
bool isValid(int x, int y, int N, int M){
    return x>=0 and y>=0 and x<N and y<M;
}

vector<int > rowDirection = {-1,1,0,0};
vector<int > colDirection = {0,0,-1,1};

void dfsToCountShapes(vector<string> &A, vector<vector<int>> &vis, int x, int y){
    vis[x][y] = 1;
    int N = A.size();
    int M = A[0].length();
    for(int i = 0; i<rowDirection.size(); i++){
        int xp = x + rowDirection[i];
        int yp = y + colDirection[i];
        if(isValid(xp, yp, N, M) and A[xp][yp] == 'X' and !vis[xp][yp]){
            dfsToCountShapes(A,vis, xp, yp);
        }
    }
}

int Solution::black(vector<string> &A) {
    int N = A.size();
    int M = A[0].length();
    int ans = 0;
    vector<vector<int>> vis(N,vector<int>(M,0));
    for(int i = 0; i<N; i++){
        for(int j = 0; j<A[i].size(); j++){
            if(A[i][j] == 'X'){
                if( !vis[i][j] ){
                    ans++;
                    dfsToCountShapes(A,vis, i, j);
                }
            }
        }
    }
    return ans;
}
