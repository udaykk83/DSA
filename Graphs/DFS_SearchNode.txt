/*
First Depth First Search
Problem Description

You are given N towns (1 to N). All towns are connected via unique directed path as mentioned in the input.

Given 2 towns find whether you can reach the first town from the second without repeating any edge.

B C : query to find whether B is reachable from C.

Input contains an integer array A of size N and 2 integers B and C ( 1 <= B, C <= N ).

There exist a directed edge from A[i] to i+1 for every 1 <= i < N. Also, it's guaranteed that A[i] <= i.

NOTE: Array A is 0-indexed.



Problem Constraints
1 <= n <= 100000



Input Format
First argument is vector A

Second argument is integer B

Third argument is integer C



Output Format
Return 1 if reachable, 0 otherwise.



Example Input
Input 1:

 A = [1, 1, 2]
 B = 1
 C = 2
Input 2:

 A = [1, 1, 2]
 B = 2
 C = 1


Example Output
Output 1:

 0
Output 2:

 1


Example Explanation
Explanation 1:

 Tree is 1--> 2--> 3 and hence 1 is not reachable from 2.
Explanation 2:

 Tree is 1--> 2--> 3 and hence 2 is reachable from 1.
*/

bool dfsToFind(vector<int> adj[], vector<int> &vis, int dest, int src){
    vis[src] = 1;
    if(src == dest){
        return true;
    }
    for(auto it : adj[src]){
        if(vis[it] == 0){
            if(dfsToFind(adj, vis, dest, it))
                return true;
        }
    }
    return false;
}
int Solution::solve(vector<int> &A, const int B, const int C) {
    int V = A.size();
    vector<int> adj[V+1];
    for(int i = 1; i<V; i++){
        int u = A[i];
        int v = i + 1;
        adj[u].push_back(v);
    }
    vector<int> vis(V+1, 0);
    bool found = dfsToFind(adj, vis, B, C);
    return found;
}
