/*
Maximum Sum BST in Binary Tree

Given a binary tree root, the task is to return the maximum sum of all keys of any sub-tree which is also a Binary Search Tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.

Post Order (DFS) TC-O(N)


Here Info indicates
sum = current sum of root value + LeftSubTree(LST) sum + RightSubtree(RST) sum;
maxi - maximum in LST
mini - minimum in RST
ans - maximum value BST sum;
isBSt whwtgher BST or not
*/


class Info{
        public:
        int sum;
        int maxi;
        int mini;
        int ans;
        bool isBST;
    };
    Info largestBST(TreeNode* root) {
        if(root == NULL){
            return {0, INT_MIN, INT_MAX, 0, true};
        }
        if(root->left == NULL and root->right == NULL){
            return {root->val, root->val, root->val, (root->val), true};
        }
        Info l = largestBST(root->left);
        Info r = largestBST(root->right);
        Info ret;        
        ret.maxi = max(root->val, max(l.maxi, r.maxi));
        ret.mini = min(root->val, min(l.mini, r.mini));
        ret.sum = (root->val + l.sum + r.sum);
        if(l.maxi < root->val and root->val < r.mini and l.isBST and r.isBST){            
            return {ret.sum, ret.maxi, ret.mini, max(ret.sum, max(l.ans,r.ans)), true};
        }
        else{
            return {ret.sum, ret.maxi, ret.mini, max(l.ans,r.ans), false};
        }
    }
    int maxSumBST(TreeNode* root) {
        int k = largestBST(root).ans;
        return k>0 ? k :  0;
    }