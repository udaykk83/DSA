//Binary Search Tree to Greater Sum Tree
/*
Given the root of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.
i/p
[4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]
[0,null,1]
[1,0,2]
[3,2,4,1]

o/p
[30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]
[1,null,1]
[3,3,2]
[7,9,4,10]
*/

void togreaterbsthelper(TreeNode* root, int &sum){
        if(root == NULL)
                return ;
        togreaterbsthelper(root->right, sum);
        sum = sum + root->val;
        if(sum > root->val){
            root->val = sum;
        }
        togreaterbsthelper(root->left, sum);        
}
TreeNode* bstToGst(TreeNode* root) {
        if(root == NULL)
                return root;
        if(root->left == NULL and root->right == NULL)
                return root;
        int sum = 0;
        //int k =
        togreaterbsthelper(root, sum);
        return root;        
}