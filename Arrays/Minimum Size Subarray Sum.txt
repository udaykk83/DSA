*/
Minimum Size Subarray Sum 
TC-O(NlogN)
SC-O(1)


Given an array of positive integers nums and a positive integer target, return the minimal length of a contiguous subarray [numsl, numsl+1, ..., numsr-1, numsr] of which the sum is greater than or equal to target. If there is no such subarray, return 0 instead.

 

Example 1:

Input: target = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: The subarray [4,3] has the minimal length under the problem constraint.
Example 2:

Input: target = 4, nums = [1,4,4]
Output: 1
Example 3:

Input: target = 11, nums = [1,1,1,1,1,1,1,1]
Output: 0
 

Constraints:

1 <= target <= 109
1 <= nums.length <= 105
1 <= nums[i] <= 105
 

Follow up: If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log(n)).
*/

int minSubArrayLen(int target, vector<int>& nums) {
        int low=1;
        int high=nums.size();
        int ans=0;
        while(low<=high){
            int mid=low+(high-low)/2;
            if(checkMinLength(nums,mid,target)){
                ans=mid;
                high=mid-1;
            }
            else{
                low=mid+1;
            }
        }
        return ans;
}
bool checkMinLength(vector<int> &nums,int minSize,int target){
        int sum=0;
        int maxSum=INT_MIN;
        for(int i=0;i<minSize;i++){
            sum=sum+nums[i];
        }
        maxSum=max(maxSum,sum);
        for(int i=minSize;i<nums.size();i++){
            sum=sum-nums[i-minSize]+nums[i];
            maxSum=max(maxSum,sum);
        }
        if(maxSum>=target)
                return true;
        else
                return false;
}