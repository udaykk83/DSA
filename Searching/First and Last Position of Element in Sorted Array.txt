/*
First and Last Position of Element in Sorted Array
Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums is a non-decreasing array.
-109 <= target <= 109
*/

 int firstOccurrence(vector<int>& v, int low, int high, int key){
        int ans = -1;
        while(low <= high){
            int mid = low + (high - low)/2;
            if(v[mid] == key){
                ans = mid;
                high = mid-1;
            }
            else if(v[mid] < key)
                low = mid + 1;
            else
                high = mid - 1;
        }
        return ans;
    }
    int lastOccurrence(vector<int>& v, int low, int high, int key){
        int ans = -1;
        while(low <= high){
            int mid = low + (high - low)/2;
            if(v[mid] == key){
                ans = mid;
                low = mid+1;
            }
            else if(v[mid] < key)
                low = mid + 1;
            else
                high = mid - 1;
        }
        return ans;
    }
    vector<int> searchRange(vector<int>& v, int x) {
        int n = v.size();
        int first = firstOccurrence(v,0,n-1,x);
        int last = lastOccurrence(v,0,n-1,x);
        return {first,last};
    }